- var domain = ports.tf_domain + '.com'
- var producerurl = 'https://' + ports.producer_name + '.' + domain
- var producerurldn = 'https://' + ports.producer_name +  ports.dn_domain + '.com'
- var producerurltf = 'https://' + ports.producer_name + ports.tf_domain + '.com'
- var producerurlfa = 'https://' + ports.producer_name +  ports.fa_domain + '.com'
- var wpurl = 'https://' + ports.wp_name + '.' + domain + '/wp/wp-admin'
- var magurl = ports.mag_url
- var dn_live_static = 'https://' + ports.host_name + ports.dn_domain + '.com'
- var tf_live_static = 'https://' + ports.host_name + ports.tf_domain + '.com'
- var fa_live_static = 'https://' + ports.host_name + ports.fa_domain + '.com'
- var dn_dev = 'https://' + ports.host_name + '-elder' + ports.dn_domain + '.com'
- var tf_dev = 'https://' + ports.host_name + '-elder' + ports.tf_domain + '.com'
- var fa_dev = 'https://' + ports.host_name + '-elder' + ports.dn_domain + '.com'
- var displaymessages = displaymessages
- var export_status = export_status
- var sites = ['dn','tf','fa']
- var dbTaskStr = ports.moveWordpressDB
- var whichEnv = ports.whichEnv


doctype html
html(lang='en')
  head
    title= title
style.
    *{
        box-sizing:border-box;
    }
    body{
        padding:24px;
    }
    .control-group-wrap{
        display:flex;
        flex-flow:row;
        justify-content:space-between;
        align-items:flex-start;
    }
    .control-group-wrap-inner{
        display:inline-block;
        width:100%;
    }
    @media( min-width:768px){
        .control-group-wrap-inner{
            width:48%;
        }
    }
    
    .control-group{
        padding:0 0 20px;
        width:100%;
        display:flex;
        flex-flow:column;
        align-items:flex-start;
    }
    .control-group.export-status ul{
        width:100%;
        max-height:8em;
        overflow-y:scroll;
        border:1px solid gray;
        margin:0;
    }
    .control-group.export-status ul p{
        margin:0;
    }
    .messages{
        width:100%;
        height:100%;
        max-height:800px;
        border:2px solid black;
        overflow:auto;
        margin:auto;
    }
    .messages p{
       white-space: pre-wrap;
    }
    p,h2,.control-group a{
        text-decoration:none;
        font-family: arial, sans-serif;
        line-height:1.5;
        font-size:14px;
    }
    a{
        display:inline-block;
    }
    a:hover{
        background-color:gray;
    }
    form{
        display:flex;
        flex-flow:column;
    }
    input[type="text"]{
        height:30px;
        display:flex;
        align-items:center;
        justify-content:flex-start;
    }
    label{
        display:inline-block;
    }

    select{
        min-height:30px;
    }
    option{
        height:30px;
        display:flex;
        align-items:center;
        justify-content:flex-start;
    }
    .inputs-wrap{
        display:inline-flex;
        flex-flow:row;
        flex-wrap:wrap;
        justify-content:space-between;
    }
    .inputs-wrap input[type="radio"],.inputs-wrap input[type="checkbox"]{
        display:none;
    }
    .inputs-wrap label{
        flex-basis:32%;
        margin-bottom:1%;
        padding:16px 16px 16px 0;
        border:1px solid black;
        cursor:pointer;
        display:flex;
        justify-content:center;
        align-items:center;
        cursor:pointer;
    }
    .inputs-wrap label:hover{
        border-color:gray;
    }
    .inputs-wrap label:hover, input[type="radio"]:checked + label, input[type="checkbox"]:checked+label{
        background-color:gray;
    }
    .repeater fieldset:last-child{
        display:none;
    }
    .repeater .button{
        display:inline-flex;
        margin-bottom:4px;
        cursor:pointer;
        padding: 16px;
        border: 1px solid gray;
    }
    .repeater .button:hover{
        background-color:gray;
    }
    .repeater fieldset{
        position:relative;
        display:flex;
        justify-content:space-between;
        align-items:center;
        margin:4px 0;
    }
    .repeater input{
        width:calc(100% - 40px);
    }
    .repeater fieldset .remove{
        padding:4px;
        cursor:pointer;
    }
    .repeater fieldset .remove:hover{
        background-color:gray;
    }
    #incremental-build input[type="submit"]{
        padding:16px;
        cursor:pointer;
        display:inline-flex;
        justify-content:center;
        align-items:center;
    }
    #incremental-build input[type="submit"]:hover{
        background-color:black;
        color:white;
    }
    [data-exportid]{
        cursor:pointer;
    }
    [data-exportid]:hover{
        background-color:gray;
    }
    .active_sale_rules{
        border:1px solid black;
        min-height:1em;
        max-height:8em;
        overflow:auto;
        width:100%;
        list-style-type:decimal;
    }
    a.copy_db{
        color:red;
        border:2px solid red;
        padding: 8px;
    }

body
    .control-group-wrap
        .control-group-wrap-inner
            .control-group
                h2=ports.host_name
                a(href=wpurl, target='_blank') Wordpress Admin (u:wpcms, p:wpcms)
                a(href=magurl, target='_blank') Magento Admin (login in lastpass)
                h2 Exported Sites
                //- a(href='?task=exportelder--dn') Start DN Export Elder
                //- a(href='?task=exportelder--dn&routes=learn,home,misc') Start DN Export Elder -- Shop, Learn, On-Sale, Home Routes
                //- a(href='?task=exportelder--dn&routes=collections,products') Start DN Export Elder -- Collections, Products Routes
                //- a(href='?task=exportelder--dn&routes=blog') Start DN Export Elder -- Blog Routes
                //- a(href='?task=exportelder--dn&routes=home') Start DN Export Elder -- Home, On-Sale Routes
                a(href=dn_live_static, target='_blank') View DN (If you see an error, you may need to export first)
                //- a(href='?task=exportelder--tf') Start TF Export Elder
                //- a(href='?task=exportelder--tf&routes=learn,home,misc') Start TF Export Elder -- Shop, Learn, On-Sale, Home Routes
                //- a(href='?task=exportelder--tf&routes=collections,products') Start TF Export Elder -- Collections, Products Routes
                //- a(href='?task=exportelder--tf&routes=blog') Start TF Export Elder -- Blog Routes
                //- a(href='?task=exportelder--tf&routes=home') Start TF Export Elder -- Home, On-Sale Routes
                a(href=tf_live_static, target='_blank') View TF (If you see an error, you may need to export first)
                //- a(href='?task=exportelder--fa') Start FA Export Elder
                //- a(href='?task=exportelder--fa&routes=learn,home,misc') Start FA Export Elder -- Shop, Learn, On-Sale, Home Routes
                //- a(href='?task=exportelder--fa&routes=blog') Start FA Export Elder -- Blog Routes
                //- a(href='?task=exportelder--fa&routes=home') Start FA Export Elder -- Home, On-Sale Routes
                a(href=fa_live_static, target='_blank') View FA (If you see an error, you may need to export first)

            .control-group
                h2 Exports
                form#incremental-build(action="/" method="GET")
                    input(type="hidden" name="task" value="export")
                    p Site
                    .inputs-wrap
                        for siteId in ports.appSiteIds
                            input(type="radio" name="site" value=siteId id='site' + siteId) 
                            label(for='site' + siteId) #{siteId}
                                 
                    p Routes - Leave blank for full export
                    .inputs-wrap
                        for route in ports.appRoutes
                            input(type="checkbox" name="routes" value=route id='route' + route) 
                            label(for='route' + route) #{route}
                    p Specific Paths, like /collections/engagement-wedding-rings/
                    .repeater
                        div.button Add Path
                        div(data-repeatable='')
                            fieldset
                                label(for='field')
                                input#path(type='text' name='list')
                                div.remove X
                    input(type='submit' value="Run Export")

            .control-group
                if ports.indexer_status != null
                    h2='Indexer Status as of ' + ports.status_time
                    if ports.indexer_status
                        p Magento Indexes are Green.
                    else
                        p Magento Indexes are Red, please wait to export.
                    h2 Active Sale Rules
                    if typeof ports.active_sale_rules != 'undefined' && ports.active_sale_rules
                        ul.active_sale_rules
                            each sale_rule in ports.active_sale_rules
                                li
                                    p=sale_rule.rule + ' -- ' + sale_rule.id + ' -- ' + sale_rule.websites.join(',')
                else
                    h2 Waiting to receive Magento status information ...


            .control-group 
                h2 Dev
                a(href='?task=develder--dn') Start DN Dev Elder
                a(href='?task=esdevelder--dn') Start DN Esbuild Dev Elder
                a(href=dn_dev, target='_blank') View DN Dev (remember to start first)
                //- a(href=producerurldn + ':' + ports.dn, target='_blank') View DN Dev (remember to start first)
                a(href='?task=develder--tf') Start TF Dev Elder
                a(href='?task=esdevelder--tf') Start TF Esbuild Dev Elder
                a(href=tf_dev, target='_blank') View TF Dev (remember to start first)
                //- a(href=producerurltf + ':' + ports.tf, target='_blank') View TF Dev (remember to start first)
                a(href='?task=develder--fa') Start FA Dev Elder
                a(href='?task=esdevelder--fa') Start FA Esbuild Dev Elder
                a(href=fa_dev, target='_blank') View FA Dev (remember to start first)
                //- a(href=producerurlfa + ':' + ports.fa, target='_blank') View FA Dev (remember to start first)

            .control-group
                h2 AWS Cache Flushing
                p You probably don't need to use this. Flushing happens automatically on exports, but here are buttons if you need an extra flush for some reason
                a(href='?task=' + ports.dnFlushJson) Flush DN
                a(href='?task=' + ports.tfFlushJson) Flush TF
                a(href='?task=' + ports.faFlushJson) Flush FA
                a(href='?task=' + ports.apiFlushJson) Flush API
                a(href='?task=' + ports.otherFlushJson) Flush Other
                a(href='?task=' + ports.dnFlushGqlJson) Flush DN Graphql
                a(href='?task=' + ports.tfFlushGqlJson) Flush TF Graphql
                a(href='?task=' + ports.faFlushGqlJson) Flush FA Graphql

            .control-group
                h2 Varnish Cache Flushing
                p You probably don't need to use this. Flushing happens automatically on exports, but here are buttons if you need an extra flush for some reason
                a(href='?task=' + ports.dnVarnishJson) Flush DN Varnish Cache
                a(href='?task=' + ports.tfVarnishJson) Flush TF Varnish Cache
                a(href='?task=' + ports.faVarnishJson) Flush FA VarnishCache
                a(href='?task=' + ports.dnVarnishApiJson) Flush DN API Varnish Cache
                a(href='?task=' + ports.tfVarnishApiJson) Flush TF API Varnish Cache
                a(href='?task=' + ports.faVarnishApiJson) Flush FA API VarnishCache

            .control-group
                h2 Elder Container Down
                p Send Elder Container Down Command. Send a command to tell the Elder container to shut down. These containers should only be on during an export or in dev mode. But if there is an export problem may inadvertantly stay on.
                a(href='?task=' + ports.dnDownJson) Send DN Container Down Signal
                a(href='?task=' + ports.tfDownJson) Send TF Container Down Signal
                a(href='?task=' + ports.faDownJson) Send FA Container Down Signal

            .control-group
                h2 Add A Display Message
                form(action="/" method="GET")
                    input(type="text" name="displaymessage" placeholder="Put Your Message Here")
                    input(type="submit")

            .control-group 
                h2 Dev Only Elder Clean
                p This will delete your public folder and build files, this is just for dev use.
                a(href='?task=cleanelder--dn') DN Delete Elder Public and Build Files
                a(href='?task=cleanelder--tf') TF Delete Elder Public and Build Files
                a(href='?task=cleanelder--fa') FA Delete Elder Public and Build Files

            //- .control-group
            //-     h2 Overview
            //-     p The front end for diamondnexus.com, 1215diamonds.com, and foreverartisans.com is generated using the Elder framework. Elder is a node js application framework. Elder uses Svelte as its component framework. <br/> Elder pages are built with Svelte components. With Svelte alone, javascript is loaded onto a page, then the the html is rendered using javascript functions. Elder pre-renders the html using node js on the server, so that when the page loads, the html is immediately ready to view and is SEO friendly. After the page is loaded, the html is “hydrated” so that all of the js functionality of the app is attached. <br/>Elder can run in modes to either server side render pages on the fly or statically pre-render all of the pages on a site and store those static pages (including html, js and css) in a folder that can be served up like a traditional basic html site.<br/>The front end for these site is headless, meaning they get most of their data, text, images, etc, from a separate back-end. We are using Magento for product data and Wordpress for CMS and other custom data. Additionally, at this stage we will be using the default Magento Checkout, Cart, and User areas. The way we will jump between the Magento checkout and the rest of the site is to serve the sites through NGINX and switch based on the url.<br/>For our set-up, we are running Sapper in server side mode for development. This means that changes made to the code or in the databases will be viewable right away.<br/>For production we are using the static version of the site, meaning that in order to make changes, we need to run an export of the site. At this point in Sapper development and static rendering in general, we have to re-render the whole site when there are changes. This is because the partial files that are served as partial page loads are generated using unique hashes. There have been some recent improvements in this in the static rendering scene and this may be on the road map for Sapper coming soon.<br/>The front-end controller page, which you are viewing now, accepts get requests through a query parameter aka ?task=dev—dn. It turns these queries into rabbitmq tasks that are received by a node script listening for each app. Each app can be told to run in dev mode, which include dynamic server side rendering, or it can be told to export the files, which can then be served either through a node script (currently there’s a link to do this) or by NGINX.

        .control-group-wrap-inner
            .control-group
                ul.messages 
                    each val, key in displaymessages 
                        li(class= (val.config && val.config.exportid ? val.config.exportid : ''))
                            p=val.msg + '\n' + val.date
            h2 Export Status
            each v, k in sites
                h2=v.toUpperCase() 
                .control-group.export-status
                    h2=v + ' queued -- Waiting for the container to start then graphql caches to flush'
                    ul 
                        each val, key in export_status[v].queued 
                            li 
                                p="Export -- " + val.exportid
                                p="Time: " + val.timeStamp
                                if val.list
                                    p="List: " + val.list
                                if val.routes
                                    p="Routes: " + val.routes
                                hr
                    h2=v + ' running -- Elder is building this right now'
                    ul 
                        each val, key in export_status[v].running 
                            li 
                                p="Export -- " + val.exportid
                                p="Time: " + val.timeStamp
                                if val.list
                                    p="List: " + val.list
                                if val.routes
                                    p="Routes: " + val.routes
                                hr
                    h2=v + ' complete -- Built but not yet flushed (Click to jump to errors)'
                    ul 
                        each val, key in export_status[v].complete 
                            li(data-exportid=val.exportid) 
                                p="Export -- " + val.exportid
                                p="Time: " + val.timeStamp
                                if val.incrementalBuildConfig && val.incrementalBuildConfig.list
                                    p="List: " + val.incrementalBuildConfig.list
                                if val.incrementalBuildConfig && val.incrementalBuildConfig.routes
                                    p="Routes: " + val.incrementalBuildConfig.routes
                                hr
                    h2=v + ' flushed -- Should be visible on the site (Click to jump to errors)'
                    ul 
                        each val, key in export_status[v].flushed 
                            li(data-exportid=val.exportid)  
                                p="Export -- " + val.exportid
                                p="Time: " + val.timeStamp
                                if val.incrementalBuildConfig && val.incrementalBuildConfig.list
                                    p="List: " + val.incrementalBuildConfig.list
                                if val.incrementalBuildConfig && val.incrementalBuildConfig.routes
                                    p="Routes: " + val.incrementalBuildConfig.routes
                                hr
                    h2=v + ' stopped -- Overridden by another export'
                    ul 
                        each val, key in export_status[v].stopped 
                            li 
                                p="Export -- " + val.exportid
                                p="Time: " + val.timeStamp
                                if val.list
                                    p="List: " + val.list
                                if val.routes
                                    p="Routes: " + val.routes
                                if val.incrementalBuildConfig && val.incrementalBuildConfig.list
                                    p="List: " + val.incrementalBuildConfig.list
                                if val.incrementalBuildConfig && val.incrementalBuildConfig.routes
                                    p="Routes: " + val.incrementalBuildConfig.routes
                                hr
                br
            if whichEnv == 'prod'
                .control-group 
                    h2 Copy Staging Wordpress DB to live and dev.
                    p This will copy the Staging Wordpress DB over to the m2-dev site and to production.
                    button(onclick='confirmDBReload()' class="copy_db") Copy Over the Wordpress DB
                    p#reload_db_text
                                

script.
    let dbTaskStr='!{dbTaskStr}';
    // make completed exports and flushed exports clickable to scroll to errors in the message window
    let exportIdButtons = document.querySelectorAll('[data-exportid]')
    if( exportIdButtons ){
        exportIdButtons.forEach( btn => {
            let exportid = btn.getAttribute('data-exportid')
            btn.addEventListener('click', function(e){
                let errors = document.querySelectorAll('.' + exportid)
                if(errors){
                    errors[0].scrollIntoView()
                }
                //- if( errors){
                //-     document.querySelector('.messages').scrollTop = errors[0].offsetTop - 60;
                //- }
            })
        })
    }

    let sidebar = document.querySelector(".messages");
    let rulesbar = document.querySelector(".active_sale_rules");

    let topScroll = localStorage.getItem("messages-scroll");
    if (topScroll !== null) {
        sidebar.scrollTop = parseInt(topScroll, 10);
    }
    let rulesScroll = localStorage.getItem("rulesbar-scroll");
    if (rulesScroll !== null && rulesbar) {
        rulesbar.scrollTop = parseInt(rulesScroll, 10);
    }
    
    //uncheck the routes boxes when you switch sites
    let siteIdButtons = document.querySelectorAll('[name="site"]')
    if( siteIdButtons ){
        siteIdButtons.forEach( butn => {
            butn.addEventListener('click', function(){
                let routesBoxes = document.querySelectorAll('[name="routes"]')
                routesBoxes.forEach( r => {
                    r.checked = false
                })
                localStorage.setItem("pathvalues", JSON.stringify([])); 
                location.reload()
            })
        })
    }


    // Populate values from local storage since page is constantly refreshing
    let selectIds = ['routes','site']
    selectIds.forEach( (id) => {
        if( localStorage.getItem( id + "values") != null){
            let valStored = localStorage.getItem(id + "values"); 
            let boxes = document.querySelectorAll('[name="' + id + '"]')
            if( boxes ){
                boxes = Array.from(boxes);
                valStored.split(',').forEach(function(v) {
                    boxes.forEach( (box) => {
                        if( box.value == v ){
                            box.checked = true;
                        }
                    })
                    //- boxes.find(c => c.value == v).checked = true;
                });
            }
           
        }
    })

    function createRepeatField(config){
        //   let $repeater = e.target.closest('.repeater').querySelector('[data-repeatable]'),
        let $repeater = document.querySelector('[data-repeatable]'),
            count = $repeater.childElementCount,
            $clone = $repeater.lastChild.cloneNode(true);
        console.log('$repeater', $repeater, 'count', count, '$clone', $clone)
        $clone.querySelectorAll('[id]').forEach(function(el) {
            el.id = el.id + '_' + count;
        });

        $clone.querySelectorAll('[name]').forEach(function(el) {
            el.name = el.name + '[' + count + ']';
        });

        $clone.querySelectorAll('label').forEach(function(el) {
            el.setAttribute('for', el.getAttribute('for') + '_' + count);
        });

        $clone.querySelectorAll('input').forEach(function(el) {
            el.value = config.value;
        });
        $clone.querySelectorAll('.remove').forEach((el) => {
            el.addEventListener('click', (el) => {
                let input = $clone.querySelector('input')
                if( input ){
                    let paths = localStorage.getItem("pathvalues"); 
                    if( paths ){
                        paths = JSON.parse(paths)
                        paths = paths.filter( p => {
                            if(p ===input.value){
                                return false
                            }
                            return true
                        })
                        localStorage.setItem("pathvalues", JSON.stringify(paths)); 
                        location.reload()
                    }
                }
                
            })
        });
        $clone.addEventListener('change', (el) => {
            console.log('change el', el)
            let pathInputs = $repeater.querySelectorAll('input')
            if( pathInputs ){
                let paths = []
                pathInputs.forEach( input => {
                    paths.push(input.value)
                    console.log('input', input)
                })
                paths = paths.reverse()
                localStorage.setItem("pathvalues", JSON.stringify(paths)); 
            }
        })
        $repeater.insertBefore($clone, $repeater.firstChild);
    }

    document.querySelector('.repeater .button').addEventListener('click', function(e) {
        e.preventDefault();
        createRepeatField({ value: ''})
    });

    let paths = localStorage.getItem("pathvalues");
    if( paths ){
        paths = JSON.parse(paths)
        for( let i=0; i < paths.length; i++){
            if( i == 0){
                continue
            }
            createRepeatField({value:paths[i]})
        }
    }

    let buildForm = document.querySelector('#incremental-build')
    if( buildForm ){
        buildForm.addEventListener('submit', (el) => {
            localStorage.setItem("pathvalues",'[]')
            return true;
        })
    }        
    
    window.addEventListener("beforeunload", () => {
        localStorage.setItem("messages-scroll", sidebar.scrollTop);
        if( rulesbar ){
            localStorage.setItem("rulesbar-scroll", rulesbar.scrollTop);
        } else{
            localStorage.setItem("rulesbar-scroll", 0);
        }

        selectIds.forEach( (id) => {
            let boxes = document.querySelectorAll('[name="' + id + '"]:checked')
            if( boxes ){
                let valsSelected = Array.prototype.slice.call(boxes,0).map(function(v,i,a) { 
                    return v.value; 
                });
                valsSelected = valsSelected.join(',')
                localStorage.setItem(id + "values", valsSelected); 
            }
        })
       
    });

    //copy over db confirm button
    const confirmDBReload = function () {
        if (confirm("Are you sure you want to copy the staging Wordpress db over to the dev and production sites!") == true) {
            document.getElementById("reload_db_text").innerHTML = "Reloading Wordpress DB!";
            if ('URLSearchParams' in window) {
                var searchParams = new URLSearchParams(window.location.search);
                searchParams.set("task", dbTaskStr);
                window.location.search = searchParams.toString();
            }
        } 
    }
    setTimeout(function(){
        location.reload()
    },20000)
    // You can put it in LocalStorage. 
    
    
    