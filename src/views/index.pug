- var domain = ports.tf_domain + '.com'
- var producerurl = 'https://' + ports.producer_name + '.' + domain
- var producerurldn = 'https://' + ports.producer_name +  '.' + ports.dn_domain + '.com'
- var producerurltf = 'https://' + ports.producer_name + '.' + ports.tf_domain + '.com'
- var producerurlfa = 'https://' + ports.producer_name +  '.' + ports.fa_domain + '.com'
- var wpurl = 'https://' + ports.wp_name + '.' + domain + '/wp/wp-admin'
- var magurl = ports.mag_url
- var dn_live_static = 'https://' + ports.host_name + '.' + ports.dn_domain + '.com'
- var tf_live_static = 'https://' + ports.host_name + '.' + ports.tf_domain + '.com'
- var fa_live_static = 'https://' + ports.host_name + '.' + ports.fa_domain + '.com'
- var dn_dev = 'https://' + ports.host_name + '-elder' + '.' + ports.dn_domain + '.com'
- var tf_dev = 'https://' + ports.host_name + '-elder' + '.' + ports.tf_domain + '.com'
- var fa_dev = 'https://' + ports.host_name + '-elder' + '.' + ports.dn_domain + '.com'
- var displaymessages = displaymessages
- var export_status = export_status
- var sites = ['tlx']
- var dbTaskStr = ports.moveWordpressDB
- var whichEnv = ports.whichEnv


doctype html
html(lang='en')
  head
    title= title
style.
    *{
        box-sizing:border-box;
    }
    body{
        padding:24px;
    }
    .control-group-wrap{
        display:flex;
        flex-flow:row;
        justify-content:space-between;
        align-items:flex-start;
    }
    .control-group-wrap-inner{
        display:inline-block;
        width:100%;
    }
    @media( min-width:768px){
        .control-group-wrap-inner{
            width:48%;
        }
    }
    
    .control-group{
        padding:0 0 20px;
        width:100%;
        display:flex;
        flex-flow:column;
        align-items:flex-start;
    }
    .control-group.export-status ul{
        width:100%;
        max-height:8em;
        overflow-y:scroll;
        border:1px solid gray;
        margin:0;
    }
    .control-group.export-status ul p{
        margin:0;
    }
    .messages{
        width:100%;
        height:100%;
        max-height:800px;
        border:2px solid black;
        overflow:auto;
        margin:auto;
    }
    .messages p{
       white-space: pre-wrap;
    }
    p,h2,.control-group a{
        text-decoration:none;
        font-family: arial, sans-serif;
        line-height:1.5;
        font-size:14px;
    }
    a{
        display:inline-block;
    }
    a:hover{
        background-color:gray;
    }
    form{
        display:flex;
        flex-flow:column;
    }
    input[type="text"]{
        height:30px;
        display:flex;
        align-items:center;
        justify-content:flex-start;
    }
    label{
        display:inline-block;
    }

    select{
        min-height:30px;
    }
    option{
        height:30px;
        display:flex;
        align-items:center;
        justify-content:flex-start;
    }
    .inputs-wrap{
        display:inline-flex;
        flex-flow:row;
        flex-wrap:wrap;
        justify-content:space-between;
    }
    .inputs-wrap input[type="radio"],.inputs-wrap input[type="checkbox"]{
        display:none;
    }
    .inputs-wrap label{
        flex-basis:32%;
        margin-bottom:1%;
        padding:16px 16px 16px 0;
        border:1px solid black;
        cursor:pointer;
        display:flex;
        justify-content:center;
        align-items:center;
        cursor:pointer;
    }
    .inputs-wrap label:hover{
        border-color:gray;
    }
    .inputs-wrap label:hover, input[type="radio"]:checked + label, input[type="checkbox"]:checked+label{
        background-color:gray;
    }
    .repeater fieldset:last-child{
        display:none;
    }
    .repeater .button{
        display:inline-flex;
        margin-bottom:4px;
        cursor:pointer;
        padding: 16px;
        border: 1px solid gray;
    }
    .repeater .button:hover{
        background-color:gray;
    }
    .repeater fieldset{
        position:relative;
        display:flex;
        justify-content:space-between;
        align-items:center;
        margin:4px 0;
    }
    .repeater input{
        width:calc(100% - 40px);
    }
    .repeater fieldset .remove{
        padding:4px;
        cursor:pointer;
    }
    .repeater fieldset .remove:hover{
        background-color:gray;
    }
    #incremental-build input[type="submit"]{
        padding:16px;
        cursor:pointer;
        display:inline-flex;
        justify-content:center;
        align-items:center;
    }
    #incremental-build input[type="submit"]:hover{
        background-color:black;
        color:white;
    }
    [data-exportid]{
        cursor:pointer;
    }
    [data-exportid]:hover{
        background-color:gray;
    }
    .active_sale_rules{
        border:1px solid black;
        min-height:1em;
        max-height:8em;
        overflow:auto;
        width:100%;
        list-style-type:decimal;
    }
    a.copy_db{
        color:red;
        border:2px solid red;
        padding: 8px;
    }

body
    .control-group-wrap
        .control-group-wrap-inner
            .control-group
                h2=ports.host_name
                a(href='https://beta.timeluxury.com/admin', target='_blank') Magento Admin
                a(href='https://beta.timeluxury.com', target='_blank') View Timeluxury

            .control-group
                h2 Build
                button(onclick="location.reload()" style="padding:8px 16px;margin-bottom:10px;cursor:pointer;") ðŸ”„ Refresh Status
                form#incremental-build(action="/" method="GET")
                    input(type="hidden" name="task" value="export")
                    input(type="hidden" name="site" value="tlx")
                    input(type='submit' value="Build Timeluxury")

            .control-group
                if ports.indexer_status != null
                    h2='Indexer Status as of ' + ports.status_time
                    if ports.indexer_status
                        p Magento Indexes are Green.
                    else
                        p Magento Indexes are Red, please wait to export.
                    h2 Active Sale Rules
                    if typeof ports.active_sale_rules != 'undefined' && ports.active_sale_rules
                        ul.active_sale_rules
                            each sale_rule in ports.active_sale_rules
                                li
                                    p=sale_rule.rule + ' -- ' + sale_rule.id + ' -- ' + sale_rule.websites.join(',')
                else
                    h2 Waiting to receive Magento status information ...



        .control-group-wrap-inner
            .control-group
                ul.messages 
                    each val, key in displaymessages 
                        li(class= (val.config && val.config.exportid ? val.config.exportid : ''))
                            p=val.msg + '\n' + val.date
            h2 Build Status
            each v, k in sites
                h2=(v === 'tlx' ? 'Timeluxury' : v.toUpperCase()) 
                .control-group.export-status
                    h2=v + ' queued -- Waiting to start build'
                    ul 
                        each val, key in export_status[v].queued 
                            li 
                                p="Build -- " + val.exportid
                                p="Time: " + val.timeStamp
                                if val.list
                                    p="List: " + val.list
                                if val.routes
                                    p="Routes: " + val.routes
                                hr
                    h2=v + ' running -- Building right now'
                    ul 
                        each val, key in export_status[v].running 
                            li 
                                p="Build -- " + val.exportid
                                p="Time: " + val.timeStamp
                                if val.list
                                    p="List: " + val.list
                                if val.routes
                                    p="Routes: " + val.routes
                                hr
                    h2=v + ' complete -- Build finished (Click to jump to errors)'
                    ul 
                        each val, key in export_status[v].complete 
                            li(data-exportid=val.exportid) 
                                p="Build -- " + val.exportid
                                p="Time: " + val.timeStamp
                                if val.incrementalBuildConfig && val.incrementalBuildConfig.list
                                    p="List: " + val.incrementalBuildConfig.list
                                if val.incrementalBuildConfig && val.incrementalBuildConfig.routes
                                    p="Routes: " + val.incrementalBuildConfig.routes
                                hr
                    h2=v + ' flushed -- Should be visible on the site (Click to jump to errors)'
                    ul 
                        each val, key in export_status[v].flushed 
                            li(data-exportid=val.exportid)  
                                p="Build -- " + val.exportid
                                p="Time: " + val.timeStamp
                                if val.incrementalBuildConfig && val.incrementalBuildConfig.list
                                    p="List: " + val.incrementalBuildConfig.list
                                if val.incrementalBuildConfig && val.incrementalBuildConfig.routes
                                    p="Routes: " + val.incrementalBuildConfig.routes
                                hr
                    h2=v + ' stopped -- Overridden by another build'
                    ul 
                        each val, key in export_status[v].stopped 
                            li 
                                p="Build -- " + val.exportid
                                p="Time: " + val.timeStamp
                                if val.list
                                    p="List: " + val.list
                                if val.routes
                                    p="Routes: " + val.routes
                                if val.incrementalBuildConfig && val.incrementalBuildConfig.list
                                    p="List: " + val.incrementalBuildConfig.list
                                if val.incrementalBuildConfig && val.incrementalBuildConfig.routes
                                    p="Routes: " + val.incrementalBuildConfig.routes
                                hr
                br
            if whichEnv == 'prod'
                .control-group 
                    h2 Copy Staging Wordpress DB to live and dev.
                    p This will copy the Staging Wordpress DB over to the m2-dev site and to production.
                    button(onclick='confirmDBReload()' class="copy_db") Copy Over the Wordpress DB
                    p#reload_db_text
                                

script.
    let dbTaskStr='!{dbTaskStr}';
    // make completed exports and flushed exports clickable to scroll to errors in the message window
    let exportIdButtons = document.querySelectorAll('[data-exportid]')
    if( exportIdButtons ){
        exportIdButtons.forEach( btn => {
            let exportid = btn.getAttribute('data-exportid')
            btn.addEventListener('click', function(e){
                let errors = document.querySelectorAll('.' + exportid)
                if(errors){
                    errors[0].scrollIntoView()
                }
                //- if( errors){
                //-     document.querySelector('.messages').scrollTop = errors[0].offsetTop - 60;
                //- }
            })
        })
    }

    let sidebar = document.querySelector(".messages");
    let rulesbar = document.querySelector(".active_sale_rules");

    let topScroll = localStorage.getItem("messages-scroll");
    if (topScroll !== null) {
        sidebar.scrollTop = parseInt(topScroll, 10);
    }
    let rulesScroll = localStorage.getItem("rulesbar-scroll");
    if (rulesScroll !== null && rulesbar) {
        rulesbar.scrollTop = parseInt(rulesScroll, 10);
    }
    
    //uncheck the routes boxes when you switch sites
    let siteIdButtons = document.querySelectorAll('[name="site"]')
    if( siteIdButtons ){
        siteIdButtons.forEach( butn => {
            butn.addEventListener('click', function(){
                let routesBoxes = document.querySelectorAll('[name="routes"]')
                routesBoxes.forEach( r => {
                    r.checked = false
                })
                localStorage.setItem("pathvalues", JSON.stringify([])); 
                location.reload()
            })
        })
    }


    // Populate values from local storage since page is constantly refreshing
    let selectIds = ['routes','site']
    selectIds.forEach( (id) => {
        if( localStorage.getItem( id + "values") != null){
            let valStored = localStorage.getItem(id + "values"); 
            let boxes = document.querySelectorAll('[name="' + id + '"]')
            if( boxes ){
                boxes = Array.from(boxes);
                valStored.split(',').forEach(function(v) {
                    boxes.forEach( (box) => {
                        if( box.value == v ){
                            box.checked = true;
                        }
                    })
                    //- boxes.find(c => c.value == v).checked = true;
                });
            }
           
        }
    })

    function createRepeatField(config){
        //   let $repeater = e.target.closest('.repeater').querySelector('[data-repeatable]'),
        let $repeater = document.querySelector('[data-repeatable]'),
            count = $repeater.childElementCount,
            $clone = $repeater.lastChild.cloneNode(true);
        console.log('$repeater', $repeater, 'count', count, '$clone', $clone)
        $clone.querySelectorAll('[id]').forEach(function(el) {
            el.id = el.id + '_' + count;
        });

        $clone.querySelectorAll('[name]').forEach(function(el) {
            el.name = el.name + '[' + count + ']';
        });

        $clone.querySelectorAll('label').forEach(function(el) {
            el.setAttribute('for', el.getAttribute('for') + '_' + count);
        });

        $clone.querySelectorAll('input').forEach(function(el) {
            el.value = config.value;
        });
        $clone.querySelectorAll('.remove').forEach((el) => {
            el.addEventListener('click', (el) => {
                let input = $clone.querySelector('input')
                if( input ){
                    let paths = localStorage.getItem("pathvalues"); 
                    if( paths ){
                        paths = JSON.parse(paths)
                        paths = paths.filter( p => {
                            if(p ===input.value){
                                return false
                            }
                            return true
                        })
                        localStorage.setItem("pathvalues", JSON.stringify(paths)); 
                        location.reload()
                    }
                }
                
            })
        });
        $clone.addEventListener('change', (el) => {
            console.log('change el', el)
            let pathInputs = $repeater.querySelectorAll('input')
            if( pathInputs ){
                let paths = []
                pathInputs.forEach( input => {
                    paths.push(input.value)
                    console.log('input', input)
                })
                paths = paths.reverse()
                localStorage.setItem("pathvalues", JSON.stringify(paths)); 
            }
        })
        $repeater.insertBefore($clone, $repeater.firstChild);
    }

    document.querySelector('.repeater .button').addEventListener('click', function(e) {
        e.preventDefault();
        createRepeatField({ value: ''})
    });

    let paths = localStorage.getItem("pathvalues");
    if( paths ){
        paths = JSON.parse(paths)
        for( let i=0; i < paths.length; i++){
            if( i == 0){
                continue
            }
            createRepeatField({value:paths[i]})
        }
    }

    let buildForm = document.querySelector('#incremental-build')
    if( buildForm ){
        buildForm.addEventListener('submit', (el) => {
            localStorage.setItem("pathvalues",'[]')
            return true;
        })
    }        
    
    window.addEventListener("beforeunload", () => {
        localStorage.setItem("messages-scroll", sidebar.scrollTop);
        if( rulesbar ){
            localStorage.setItem("rulesbar-scroll", rulesbar.scrollTop);
        } else{
            localStorage.setItem("rulesbar-scroll", 0);
        }

        selectIds.forEach( (id) => {
            let boxes = document.querySelectorAll('[name="' + id + '"]:checked')
            if( boxes ){
                let valsSelected = Array.prototype.slice.call(boxes,0).map(function(v,i,a) { 
                    return v.value; 
                });
                valsSelected = valsSelected.join(',')
                localStorage.setItem(id + "values", valsSelected); 
            }
        })
       
    });

    //copy over db confirm button
    const confirmDBReload = function () {
        if (confirm("Are you sure you want to copy the staging Wordpress db over to the dev and production sites!") == true) {
            document.getElementById("reload_db_text").innerHTML = "Reloading Wordpress DB!";
            if ('URLSearchParams' in window) {
                var searchParams = new URLSearchParams(window.location.search);
                searchParams.set("task", dbTaskStr);
                window.location.search = searchParams.toString();
            }
        } 
    }
    // Auto-refresh after successful build trigger
    let buildTriggered = localStorage.getItem('buildTriggered');
    if (buildTriggered) {
        let triggerTime = parseInt(buildTriggered);
        let elapsed = Date.now() - triggerTime;
        // Auto-refresh for 2 minutes after build trigger
        if (elapsed < 120000) {
            setTimeout(function(){
                location.reload()
            }, 10000);
        } else {
            localStorage.removeItem('buildTriggered');
        }
    }
    
    // Track when build is triggered
    let buildForm = document.querySelector('#incremental-build');
    if (buildForm) {
        buildForm.addEventListener('submit', function() {
            let tlxSelected = document.querySelector('[name="site"][value="tlx"]');
            if (tlxSelected && tlxSelected.checked) {
                localStorage.setItem('buildTriggered', Date.now().toString());
            }
        });
    } 
    
    
    